<?xml version="1.0" encoding="utf-8" ?>
<mdscript name="SN_Measure_Perf" 
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >

<!--
  Light support for performance measurements.
-->
<cues>
  <!-- Register the main lua file. -->
  <cue name="Load_Lua_Files" instantiate="true">
    <conditions>
      <event_ui_triggered screen="'Lua_Loader'" control="'Ready'" />
    </conditions>
    <actions>
      <raise_lua_event name="'Lua_Loader.Load'"
                       param="'extensions.sn_measure_perf.lua.Measure_Perf'"/>
    </actions>
  </cue>
  
  <!-- Register the python server. -->
  <cue name="Register_Pipe_Server" instantiate="true">
    <conditions>
      <event_cue_signalled cue="md.Pipe_Server_Host.Reloaded" />
    </conditions>
    <actions>
      <signal_cue_instantly
        cue="md.Pipe_Server_Host.Register_Module"
        param="'extensions/sn_measure_perf/python/Measure_Perf.py'"/>
    </actions>
  </cue>

  <!--
      Static cue for holding general state.
    
      * $DebugChance
        - Int, 0 or 100.
      * $script_sample_period
      * $script_sample_countdown
        - Ints, how many seconds between sampling script counts, and
          the related counter.
      * $md_cue_hits
        - Table, keyed by cue identifier (script name + cue name + etc.),
          holding the number of times it has been visited.
        - Gets added to by other scripts.
    -->
  <cue name="Globals">
    <actions>
      <!-- Create storage table on first load. -->
      <set_value name="Globals.$storage"   exact="table[]"/>
      <include_actions ref="Reset_Globals"/>
    </actions>
    <cues>
      <!-- Listen from the menu api reloading. -->
      <cue name="Reset_On_Lua_Reload" instantiate="true">
        <conditions>
          <event_cue_signalled cue="md.Pipe_Server_Host.Reloaded" />
        </conditions>
        <actions>
          <include_actions ref="Reset_Globals"/>
        </actions>
      </cue>
    </cues>
  </cue>
  <library name="Reset_Globals">
    <actions>
      <set_value name="Globals.$DebugChance" exact="0"/>
      <set_value name="Globals.$script_sample_period"    exact="2s" />
      <set_value name="Globals.$script_sample_countdown" exact="$script_sample_period" />
      <do_if value="not @Globals.$md_cue_hits">
        <set_value name="Globals.$md_cue_hits" exact="table[]"/>        
      </do_if>
    </actions>
  </library>
  
  
  <!-- 
  Sample once every second. This will bounce off lua to pick up some
  information, eg. fps.
  -->
  <cue name="Trigger_Sample" instantiate="true" checkinterval="1s">
    <!--No conditions.-->
    <actions>
      <raise_lua_event name="'Measure_Perf.Get_Sample'"/>
      
      <!--Every so many visits, add extra script counters.-->
      <set_value name="Globals.$script_sample_countdown" operation="subtract" />
      <do_if value="Globals.$script_sample_countdown == 0">
        <set_value name="Globals.$script_sample_countdown" exact="Globals.$script_sample_period" />
        <raise_lua_event name="'Measure_Perf.Get_Script_Info'"/>
      </do_if>
    </actions>
  </cue>

  <!-- 
  When lua responds, capture its message, fill in additional information,
  and send it all to python for handling.
  
  Messages will be key:value pairs, semicolon separated, starting
  with an 'update;' string.
  -->
  <cue name="Send_Sample" instantiate="true">
    <conditions>
      <event_ui_triggered screen="'Measure_Perf'" control="'Sample'" />
    </conditions>
    <actions>
      <!-- Grab the returned value, use it to init the dict of measurements.-->
      <set_value name="$response" exact="event.param3" />
      
      <!--Add the current time, possibly hex edited for higher precision
          at cost of wacky overall number. (Don't use colons.)-->
      <set_value name="$response.{'$systemtime'}" exact="player.systemtime.{'%G,%j,%H,%M,%S'}"/>
      
      <!--Construct the message string.-->
      <set_value name="$msg" exact="'update;'" />
      <do_for_each name="$key" valuename="$value" in="$response">
        <set_value name="$msg" exact="'%s%s:%s;'.[$msg, $key, $value]"/>
      </do_for_each>
      
      <!--Send to the pipe.-->
      <signal_cue_instantly
        cue="md.Named_Pipes.Write"
        param="table[$pipe='x4_perf', $msg=$msg]"/>
    </actions>
  </cue>
  
  
  <!-- 
  When lua responds, capture its message, fill in additional information,
  and send it all to python for handling.
  
  Messages will be key:value pairs, semicolon separated, starting
  with an 'update;' string.
  -->
  <cue name="Send_Script_Info" instantiate="true">
    <conditions>
      <event_ui_triggered screen="'Measure_Perf'" control="'Script_Info'" />
    </conditions>
    <actions>
      <set_value name="$lua_data" exact="event.param3"/>
      <set_value name="$response" exact="table[]" />


      <!--Find all ships, pull their script names.-->
      <!--TODO: maybe trim off some of this info.-->
      <find_ship groupname="$ships" multiple="true" recursive="true" 
                  masstraffic="false" space="player.galaxy"
                  functional="true"/>
      
      <do_for_each name="$ship" in="$ships">
        
        <!--Values of interest, with prefix to use.-->
        <!--Ship may have no pilot, or no command; check for null.-->
        <set_value name="$values" exact="table[
                    $ai_command     = @$ship.pilot.command.value, 
                    $ai_action      = @$ship.pilot.commandaction.value, 
                    $ai_script      = @$ship.pilot.$script_name,
                    $ai_element     = @$ship.pilot.$element_name,
                    $ai_scriptline  = @$ship.pilot.$script_line_name,                     
                    ]"/>

        <do_for_each name="$prefix" valuename="$value" in="$values">

          <do_if value="$value != null">
            <!--Prefix for being a table key, and clarifying message.-->
            <set_value name="$value" exact="$prefix + '.' + $value"/>
            <do_if value="not $response.{$value}?">
              <set_value name="$response.{$value}" exact="0"/>
            </do_if>
            <set_value name="$response.{$value}" operation="add"/>
          </do_if>
        </do_for_each>
          
        <!--More complicated: sum scriptline counts from the pilot, 
            for how often they hit the line.-->
        <do_if value="@$ship.pilot.$script_line_hits != null">
          <!--Loop over the counts; note: the ai table key has $ prefixed.-->
          <do_for_each name="$scriptline" valuename="$count" in="$ship.pilot.$script_line_hits">
            <!--Prefix again anyway, for python to pick up.-->
            <set_value name="$key" exact="'$ai_scriptline_hits.'+$scriptline"/>
              
            <!--As above, start the count, then add to it.-->
            <do_if value="not $response.{$key}?">
              <set_value name="$response.{$key}" exact="0"/>
            </do_if>
            <set_value name="$response.{$key}" operation="add" exact="$count"/>
              
            <!--Reset the count, so these are just for 60s spans.-->
            <remove_value name="$ship.pilot.$script_line_hits.{$scriptline}"/>              
          </do_for_each>
        </do_if>        
      </do_for_each>
      
      <!--Collect the sums of md cue/library calls.-->
      <do_for_each name="$cue_id" valuename="$count" in="Globals.$md_cue_hits">
        <!--Prefix again anyway, for python to pick up.-->
        <set_value name="$key" exact="'$md_cue_hits.'+$cue_id"/>
        <set_value name="$response.{$key}" exact="$count"/>
        <!--Reset the count.-->
        <remove_value name="Globals.$md_cue_hits.{$cue_id}"/>
      </do_for_each>
        
      
      <!--Construct the message string.-->
      <set_value name="$msg" exact="'update;'" />
      <do_for_each name="$key" valuename="$value" in="$response">
        <set_value name="$msg" exact="'%s:%s;'.[$key, $value]" operation="add"/>
      </do_for_each>
      
      <!--Send to the pipe.-->
      <signal_cue_instantly
        cue="md.Named_Pipes.Write"
        param="table[$pipe='x4_perf', $msg=$msg]"/>


      <!--Note: below code is newer, and aiming for a different interface setup.-->
      <!--Collect lua timestamp based info.-->
      <!--TODO: is there an easy way to serialize a table of string data?-->
      <debug_text text="'script_info;%s'.[$response]" filter="general"/>
      
    </actions>
  </cue>
  
  <!--Testing using open_menu, intercepted by lua, to do direct calls that
      resolve within the md node, not after actions finish.
      Test results: couldn't get lua to trigger before md actions finished.-->
  <!--<cue name="Lua_Call_Test" instantiate="true" checkinterval="1s">
    <actions>-->
      
      <!--Remove any existing player blackboard var from prio tests.
      <do_if value="player.entity.$call_lua_response?">
        <debug_text text="'Cleaning up old response before CallLua: %s'.[player.entity.$call_lua_response]"
                  chance="100" filter="general"/>
        <remove_value name="player.entity.$call_lua_response" />
      </do_if>-->
      
      <!--Set up an arg to pass.
      <set_value name="player.entity.$call_lua_arg" exact="'md_hello'"/>-->
      
      <!--Try commands. lua should toss a debugerror; check log on timings.-->
      <!--<debug_text text="'MD Starting'" chance="100" filter="general"/>-->
      
      <!--open_menu has a delay; test failed.-->
      <!--<open_menu menu="CallLua"/>-->

      <!--Try out a conversation instead. This doesn't open until a choice is added.-->
      <!--<start_conversation actor="player.computer" conversation="test_conv"/>
      <add_player_choice text="'test'" section="test_section"/>
      <add_conversation_view />
      
      
      <debug_text text="'MD Finished'" chance="100" filter="general"/>-->
      
      <!--If this works, player blackboard should have a response.
      <do_if value="player.entity.$call_lua_response?">
        <set_value name="$result" exact="'success'"/>
        <debug_text text="'Response from lua: %s'.[player.entity.$call_lua_response]"
                  chance="100" filter="general"/>
        <remove_value name="player.entity.$call_lua_response" />
      </do_if>
      <do_else>
        <debug_text text="'Error: No immediate response from lua'"
                  chance="100" filter="general"/>
        <set_value name="$result" exact="'fail'"/>        
      </do_else>
      <raise_lua_event name="'directChatMessageReceived'" param="'LuaCall;test: %s'.[$result]"/>-->
      
    <!--</actions>    
  </cue>-->

  <!--<cue name="Kill_Conversation" instantiate="true">
    <conditions>
      <event_conversation_started actor="player.computer" conversation="test_conv"/>
    </conditions>
    <actions>
      <debug_text text="'Killing conversation'" chance="100" filter="general"/>
      <cancel_conversation actor="player.computer" conversation="test_conv" force="true" />
      <debug_text text="'Killed conversation'" chance="100" filter="general"/>
    </actions>
  </cue>-->

  
</cues>
  
</mdscript>